{"version":3,"sources":["webpack:///tests/tests-bundle.js","webpack:///webpack/bootstrap 5a345bf1a5c76fe0daf1","webpack:///./~/chai/lib/chai/utils/flag.js","webpack:///./~/chai/lib/chai/config.js","webpack:///./src/js/config.js","webpack:///./src/js/helpers.js","webpack:///./~/chai/lib/chai/utils/inspect.js","webpack:///./~/chai/~/type-detect/index.js","webpack:///./src/js/cardinalPoints.js","webpack:///./src/js/martian.js","webpack:///./src/js/store.js","webpack:///./~/chai/lib/chai/utils/getActual.js","webpack:///./~/chai/lib/chai/utils/getName.js","webpack:///./~/chai/lib/chai/utils/getPathInfo.js","webpack:///./~/chai/lib/chai/utils/hasProperty.js","webpack:///./~/chai/lib/chai/utils/objDisplay.js","webpack:///./~/chai/lib/chai/utils/transferFlags.js","webpack:///./~/chai/~/assertion-error/index.js","webpack:///./src/js/controller.js","webpack:///./src/js/martianRobot.js","webpack:///./~/chai/index.js","webpack:///./~/chai/lib/chai.js","webpack:///./~/chai/lib/chai/assertion.js","webpack:///./~/chai/lib/chai/core/assertions.js","webpack:///./~/chai/lib/chai/interface/assert.js","webpack:///./~/chai/lib/chai/interface/expect.js","webpack:///./~/chai/lib/chai/interface/should.js","webpack:///./~/chai/lib/chai/utils/addChainableMethod.js","webpack:///./~/chai/lib/chai/utils/addMethod.js","webpack:///./~/chai/lib/chai/utils/addProperty.js","webpack:///./~/chai/lib/chai/utils/expectTypes.js","webpack:///./~/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./~/chai/lib/chai/utils/getMessage.js","webpack:///./~/chai/lib/chai/utils/getPathValue.js","webpack:///./~/chai/lib/chai/utils/getProperties.js","webpack:///./~/chai/lib/chai/utils/index.js","webpack:///./~/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteProperty.js","webpack:///./~/chai/lib/chai/utils/test.js","webpack:///./~/chai/~/deep-eql/index.js","webpack:///./~/chai/~/deep-eql/lib/eql.js","webpack:///./~/chai/~/deep-eql/~/type-detect/index.js","webpack:///./~/chai/~/deep-eql/~/type-detect/lib/type.js","webpack:///./~/chai/~/type-detect/lib/type.js","webpack:///external \"buffer\"","webpack:///./tests/tests.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","obj","key","flags","__flags","create","arguments","length","includeStack","showDiff","truncateThreshold","__WEBPACK_IMPORTED_MODULE_0__helpers__","MAX_INSTRUCTION","bounds","MAX_COORD","X_BOUNDS","Y_BOUNDS","x","y","point","Map","isNumber","test","isPositiveNumber","isPosSafe","pos","posBounds","Number","parseInt","strToEmoji","match","emoji","beingAsEmoji","str","regex","replace","set","inspect","showHidden","depth","colors","ctx","seen","stylize","formatValue","recurseTimes","constructor","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","err","visibleKeys","getEnumerableProperties","keys","getProperties","isError","getName","nameSuffix","isRegExp","RegExp","toString","isDate","Date","toUTCString","formatError","base","array","braces","isArray","push","output","formatArray","map","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","Infinity","Error","String","forEach","__lookupGetter__","__lookupSetter__","indexOf","split","line","join","substr","numLinesEst","reduce","prev","cur","ar","Array","objectToString","re","e","HTMLElement","nodeType","nodeName","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","_createClass","defineProperties","target","props","descriptor","writable","protoProps","staticProps","_points","WeakMap","CardinalPoints","this","points","toUpperCase","degree","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_step$value","return","has","__WEBPACK_IMPORTED_MODULE_1__config__","__WEBPACK_IMPORTED_MODULE_2__cardinalPoints__","cp","Martian","orientation","_name","trim","now","_x","_y","_orientation","isValidPoint","withType","isAlive","type","direction","getDegree","getPointName","lostList","_mars","Store","mars","_len","martian","_key","includes","size","martianName","delete","args","_obj","func","exec","parsePath","path","parts","mArr","parseFloat","_getPathValue","parsed","index","res","tmp","part","hasProperty","last","info","parent","exists","literals","number","string","ot","config","kstr","splice","assertion","includeAll","flag","exclude","excludeProps","excludes","slice","AssertionError","message","_props","ssf","extend","callee","captureStackTrace","stack","toJSON","_processCommands","char","being","turn","move","console","log","instruct","instructionsStr","substring","__WEBPACK_IMPORTED_MODULE_0__config__","charAt","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","__WEBPACK_IMPORTED_MODULE_0__martian__","__WEBPACK_IMPORTED_MODULE_1__helpers__","__WEBPACK_IMPORTED_MODULE_2__config__","__WEBPACK_IMPORTED_MODULE_3__store__","_processMotion","_hasScent","MartianRobot","_Martian","_this","getPrototypeOf","_isAlive","tempPos","axis","hs","pointStr","axisBounds","find","pm","used","version","util","use","fn","core","expect","should","assert","_chai","Assertion","msg","warn","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","getMessage","actual","getActual","val","chai","_","an","toLowerCase","article","includeChainingBehavior","include","expectTypes","eql","k","subset","checkArguments","assertEqual","assertEql","assertAbove","to","have","len","assertLeast","assertBelow","assertMost","assertInstanceOf","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","mixedArgsMsg","any","all","intersection","filter","every","sort","assertThrows","errMsg","is","a","thrown","desiredError","thrownError","actuallyGot","expectedThrown","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","negate","closeTo","delta","Math","abs","isSubsetOf","superset","cmp","elem","some","elem2","oneOf","list","be","assertChanges","prop","initial","assertIncreases","assertDecreases","chain","isNaN","start","finish","range","isDeep","pathInfo","getPathInfo","isExtensible","isSealed","isFrozen","express","errmsg","fail","operator","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","throws","errt","errs","assertErr","throw","doesNotThrow","Throw","val2","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as","loadShould","shouldGetter","Boolean","valueOf","shouldSetter","val1","exist","Should","transferFlags","hasProtoSupport","excludeNames","Function","apply","chainableBehavior","__methods","old_ssfi","asserterNames","getOwnPropertyNames","asserterName","pd","types","t","art","or","flagMsg","proto","getPathValue","_chainingBehavior","_method","_super","_get","b","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","ex","getType","natives","Library","tests","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","of","define","objectTypeRegexp","Promise","require","__WEBPACK_IMPORTED_MODULE_0__src_js_config__","__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__","__WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__","__WEBPACK_IMPORTED_MODULE_3__src_js_controller__","__WEBPACK_IMPORTED_MODULE_4__src_js_martian__","__WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__","__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__","describe","before","it","aM","getAll","add","update","remove","r","bot1","bot2","bot3","aMartian"],"mappings":"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","file":"tests/tests-bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 45);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(3);\n/* unused harmony export MAX_COORD */\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return MAX_INSTRUCTION; });\n/* unused harmony export X_BOUNDS */\n/* unused harmony export Y_BOUNDS */\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return bounds; });\n/** module config */\n\n\n\n/*\n * Default values\n */\nvar MAX_COORD = 50;\nvar MAX_INSTRUCTION = 100;\nvar X_BOUNDS = 5;\nvar Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nvar x = void 0,\n    y = void 0;\nvar bounds = {\n  set x(value) {\n    x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : X_BOUNDS;\n  },\n  set y(value) {\n    y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : Y_BOUNDS;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  }\n};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ exports[\"d\"] = isNumber;\n/* harmony export (immutable) */ exports[\"a\"] = isPositiveNumber;\n/* harmony export (immutable) */ exports[\"b\"] = isPosSafe;\n/* unused harmony export strToEmoji */\n/* harmony export (immutable) */ exports[\"c\"] = beingAsEmoji;\n/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nfunction isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nfunction isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nfunction isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nvar emoji = new Map();\nemoji.set('LOST', '🆘');\nemoji.set('N', '⬆️');\nemoji.set('S', '⬇️');\nemoji.set('E', '➡️');\nemoji.set('W', '⬅️');\nemoji.set('Martian', '👾');\nemoji.set('Robot', '🤖');\n\n/*\n * matcher for str.replace\n */\nfunction strToEmoji(match) {\n  return emoji.get(match);\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nfunction beingAsEmoji(str) {\n  var regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return '' + str.replace(regex, strToEmoji);\n}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = __webpack_require__(10);\nvar getProperties = __webpack_require__(32);\nvar getEnumerableProperties = __webpack_require__(29);\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(42);\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nvar _points = new WeakMap();\n\nvar CardinalPoints = function () {\n  function CardinalPoints() {\n    _classCallCheck(this, CardinalPoints);\n\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n\n\n  _createClass(CardinalPoints, [{\n    key: 'getDegree',\n    value: function getDegree(point) {\n      var points = _points.get(this);\n      return points.get(point.toString().toUpperCase());\n    }\n\n    /**\n     *\n     * @param   {number} degree\n     * @returns {string} Corresponding cardinal point for degree\n     */\n\n  }, {\n    key: 'getPointName',\n    value: function getPointName(degree) {\n      var points = _points.get(this);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          var key = _step$value[0];\n          var value = _step$value[1];\n\n          if (value === Number.parseInt(degree, 10)) {\n            return key;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    /**\n     *\n     * @param   {string} Cardinal point\n     * @returns {boolean} True if point exists in Cardinal Points map\n     */\n\n  }, {\n    key: 'isValidPoint',\n    value: function isValidPoint(point) {\n      var points = _points.get(this);\n      return points.has(point.toString().toUpperCase());\n    }\n  }]);\n\n  return CardinalPoints;\n}();\n\n/* harmony default export */ exports[\"a\"] = CardinalPoints;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__ = __webpack_require__(6);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Martian */\n\n\n\n\n\nvar cp = new __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__[\"a\" /* default */]();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\n\nvar Martian = function () {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  function Martian(name, x, y, orientation) {\n    _classCallCheck(this, Martian);\n\n    this._name = name.trim().length === 0 ? Date.now().toString() : name + '-' + Date.now();\n    this._x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(x) && x <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('x') ? x : 0;\n    this._y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(y) && y <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('y') ? y : 0;\n    this._orientation = cp.isValidPoint(orientation) ? orientation.toUpperCase() : 'N';\n  }\n\n  _createClass(Martian, [{\n    key: 'toString',\n\n\n    /**\n     *\n     * @param   {boolean} withType = false; include object type or nah?\n     * @returns {string} being string description\n     */\n    value: function toString() {\n      var withType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var str = this._x + ' ' + this._y + ' ' + this._orientation + (this.isAlive ? '' : ' LOST');\n\n      if (withType) {\n        return this.type + ' ' + str;\n      }\n      return str;\n    }\n\n    /**\n     *\n     * @param {string} direction: sets new orientation based on L/R direction\n     */\n\n  }, {\n    key: 'turn',\n    value: function turn(direction) {\n      var degree = cp.getDegree(this._orientation);\n\n      if (direction.toUpperCase() === 'R') {\n        // when turning right make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 270 ? 0 : degree + 90;\n      } else if (direction.toUpperCase() === 'L') {\n        // when turning left make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 0 ? 270 : degree - 90;\n      }\n\n      // orientation is defined in cardinal points so lets go back to that instead of degrees\n      this.orientation = cp.getPointName(degree);\n    }\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n\n  }, {\n    key: 'move',\n    value: function move() {\n      switch (this._orientation) {\n        case 'N':\n          this._y += 1;\n          break;\n        case 'S':\n          this._y -= 1;\n          break;\n        case 'E':\n          this._x += 1;\n          break;\n        case 'W':\n          this._x -= 1;\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: 'x',\n    set: function set(value) {\n      this._x = value;\n    },\n    get: function get() {\n      return this._x;\n    }\n  }, {\n    key: 'y',\n    set: function set(value) {\n      this._y = value;\n    },\n    get: function get() {\n      return this._y;\n    }\n  }, {\n    key: 'orientation',\n    set: function set(value) {\n      if (cp.isValidPoint(value)) {\n        this._orientation = value.toUpperCase();\n      } else {\n        throw new Error('This orientation ' + value + ' is not supported.');\n      }\n    },\n    get: function get() {\n      return this._orientation;\n    }\n  }, {\n    key: 'isAlive',\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: 'point',\n    get: function get() {\n      return this._x + ',' + this._y;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Martian';\n    }\n  }]);\n\n  return Martian;\n}();\n\n/* harmony default export */ exports[\"a\"] = Martian;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return lostList; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Store */\n\nvar lostList = []; // manages grid points of lost robots\n\nvar _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\n\nvar Store = function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n\n\n  _createClass(Store, [{\n    key: 'add',\n    value: function add() {\n      var mars = _mars.get(this);\n\n      for (var _len = arguments.length, martian = Array(_len), _key = 0; _key < _len; _key++) {\n        martian[_key] = arguments[_key];\n      }\n\n      martian.forEach(function (m) {\n        try {\n          if (['Martian', 'Robot'].includes(m.type)) {\n            mars.set(m.name, m);\n          }\n        } catch (e) {\n          throw new Error('Can only store Martians and Robots.');\n        }\n      });\n\n      return mars.size;\n    }\n\n    /**\n     *\n     * @param   {object}   martian to act on\n     * @returns {boolean} reflect if boolean was successful\n     */\n\n  }, {\n    key: 'update',\n    value: function update(martian) {\n      var mars = _mars.get(this);\n\n      if (mars.has(martian.name)) {\n        mars.set(martian.name, martian);\n      }\n\n      return mars.has(martian.name);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: use as key to delete from mars\n     * @returns {boolean} confirm deletion\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(martianName) {\n      var mars = _mars.get(this);\n      return mars.delete(martianName);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: key to retrieve\n     * @returns {object} martian/robot or undefined\n     */\n\n  }, {\n    key: 'get',\n    value: function get(martianName) {\n      var mars = _mars.get(this);\n      return mars.get(martianName);\n    }\n\n    /**\n     *\n     * @returns {Map} return all mars contents\n     */\n\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      var mars = _mars.get(this);\n      return mars;\n    }\n  }]);\n\n  return Store;\n}();\n\n/* harmony default export */ exports[\"b\"] = Store;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = __webpack_require__(12);\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = __webpack_require__(5);\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = __webpack_require__(4);\nvar config = __webpack_require__(1);\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(2);\n/* harmony export (immutable) */ exports[\"a\"] = instruct;\n/** @module Controller */\n\n\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log('Invalid command received while processing \\'' + being.name + '\\', moving to next character.');\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nfunction instruct(being, instructionsStr) {\n  var str = instructionsStr.trim().substring(0, __WEBPACK_IMPORTED_MODULE_0__config__[\"b\" /* MAX_INSTRUCTION */]);\n\n  for (var i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__martian__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__store__ = __webpack_require__(8);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @module Martian Robot **/\n\n\n\n\n\n\nvar _processMotion = new WeakMap();\nvar _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\n\nvar MartianRobot = function (_Martian) {\n  _inherits(MartianRobot, _Martian);\n\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  function MartianRobot(name, x, y, orientation) {\n    _classCallCheck(this, MartianRobot);\n\n    var _this = _possibleConstructorReturn(this, (MartianRobot.__proto__ || Object.getPrototypeOf(MartianRobot)).call(this, name, x, y, orientation));\n\n    _this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(_this, function (tempPos, axis) {\n      var hs = _hasScent.get(_this);\n\n      switch (hs(_this.point, tempPos, __WEBPACK_IMPORTED_MODULE_2__config__[\"a\" /* bounds */].point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          _this._isAlive = false;\n          __WEBPACK_IMPORTED_MODULE_3__store__[\"a\" /* lostList */].push(_this.point);\n          break;\n        case 2:\n          _this[axis] = tempPos;\n          break;\n        default:\n        // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(_this, function (pointStr, tempPos, axisBounds) {\n      if (__WEBPACK_IMPORTED_MODULE_3__store__[\"a\" /* lostList */].find(function (point) {\n        return point === pointStr;\n      }) && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 0;\n      } else if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n    return _this;\n  }\n\n  _createClass(MartianRobot, [{\n    key: 'move',\n\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n    value: function move() {\n      var pm = _processMotion.get(this);\n\n      switch (this._orientation) {\n        case 'N':\n          pm(this._y + 1, 'y');\n          break;\n        case 'S':\n          pm(this._y - 1, 'y');\n          break;\n        case 'E':\n          pm(this._x + 1, 'x');\n          break;\n        case 'W':\n          pm(this._x - 1, 'x');\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'isAlive',\n    set: function set(value) {\n      if (typeof value === 'boolean') {\n        this._isAlive = value;\n      } else {\n        //          this._isAlive = true;\n        throw new Error('A robot can only be alive (true) or lost (false).');\n      }\n    },\n    get: function get() {\n      return this._isAlive;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Robot';\n    }\n  }]);\n\n  return MartianRobot;\n}(__WEBPACK_IMPORTED_MODULE_0__martian__[\"a\" /* default */]);\n\n/* harmony default export */ exports[\"a\"] = MartianRobot;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(19);\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = __webpack_require__(15);\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = __webpack_require__(33);\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = __webpack_require__(1);\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = __webpack_require__(20);\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = __webpack_require__(21);\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = __webpack_require__(23);\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = __webpack_require__(24);\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = __webpack_require__(22);\nexports.use(assert);\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(1);\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = __webpack_require__(14);\nvar flag = __webpack_require__(0);\nvar config = __webpack_require__(1);\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(1);\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = __webpack_require__(0);\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(1);\nvar flag = __webpack_require__(0);\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = __webpack_require__(15);\nvar flag = __webpack_require__(0);\nvar type = __webpack_require__(5);\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(0)\n  , getActual = __webpack_require__(9)\n  , inspect = __webpack_require__(4)\n  , objDisplay = __webpack_require__(13);\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = __webpack_require__(11);\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = __webpack_require__(37);\n\n/*!\n * type utility\n */\n\nexports.type = __webpack_require__(5);\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = __webpack_require__(28);\n\n/*!\n * message utility\n */\n\nexports.getMessage = __webpack_require__(30);\n\n/*!\n * actual utility\n */\n\nexports.getActual = __webpack_require__(9);\n\n/*!\n * Inspect util\n */\n\nexports.inspect = __webpack_require__(4);\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = __webpack_require__(13);\n\n/*!\n * Flag utility\n */\n\nexports.flag = __webpack_require__(0);\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = __webpack_require__(14);\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = __webpack_require__(38);\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = __webpack_require__(31);\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = __webpack_require__(11);\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = __webpack_require__(12);\n\n/*!\n * Function name\n */\n\nexports.getName = __webpack_require__(10);\n\n/*!\n * add Property\n */\n\nexports.addProperty = __webpack_require__(27);\n\n/*!\n * add Method\n */\n\nexports.addMethod = __webpack_require__(26);\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = __webpack_require__(36);\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = __webpack_require__(35);\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = __webpack_require__(25);\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = __webpack_require__(34);\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(0);\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(39);\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = __webpack_require__(40);\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = __webpack_require__(43).Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(41);\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"buffer\");\n\n/***/ },\n/* 44 */,\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_config__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_helpers__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_js_controller__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_js_martian__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_js_store_js__ = __webpack_require__(8);\nvar chai = __webpack_require__(18);\nvar expect = chai.expect,\n    assert = chai.assert;\n\n\n\n\n\n\n\n\n\ndescribe('Store', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Storage Methods', function () {\n    var a = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"a\", 1, 1, \"E\");\n    var b = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"b\", 3, 2, \"N\");\n    var c = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"c\", 0, 3, \"W\");\n    var aM = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"aM\", 3, 2, \"N\");\n\n    var mars = new __WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"b\" /* default */]();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n    assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add(\"a\", 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    } catch (e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, \"Return true if successfully updated.\");\n    assert.strictEqual(mars.update(\"a\"), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, \"Successfully removed\");\n    assert.strictEqual(mars.get(b.name), undefined, \"We just deleted this so this should be undefined.\");\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\ndescribe('Martians & Robots', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Martians', function () {\n    var m = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"\", -1, 4, \"sw\");\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = \"Byron\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, \"Byron\", \"Can't set the name after initialization.\");\n\n    assert.strictEqual(m.x, 0, \"Negative values are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.y, 0, \"Values above the boundary are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.point, \"0,0\", \"Invalid x,y values defaults to zero.\");\n\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will be set to north on initialization.\");\n    try {\n      m.orientation = \"se\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will fail on assignment, thus leaving the previous value.\");\n\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will be set to true on initialization.\");\n    try {\n      m.isAlive = \"fL\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will fail on assignment, thus leaving the previous value.\");\n  });\n\n  it('Robots', function () {\n    var r = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\" \", 4, 2, \"E\");\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\ndescribe('controller.js', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('instruct()', function () {\n    var bot1 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 1\", 1, 1, \"E\"); // instruct 1 1 E RFRFRFRF\n    var bot2 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 2\", 3, 2, \"N\"); // instruct 3 2 N FRRFLLFFRRFLL\n    var bot3 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 3\", 0, 3, \"W\"); // instruct 0 3 W LLFFFLFLFL\n    var aMartian = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"aMartian\", 3, 2, \"N\"); // instruct -m 3 2 N FRRFLLFFRRFLLFFF\n\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot1, \"RFRFRFRF\").toString(), \"1 1 E\", \"Test: 1 1 E\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot2, \"FRRFLLFFRRFLL\").toString(), \"3 3 N LOST\", \"Test: 3 2 N\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"a\" /* lostList */].find(function (point) {\n      return point === \"3,3\";\n    }), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.isAtLeast(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(aMartian, \"FRRFLLFFRRFLLFFF\").y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"a\" /* lostList */].find(function (point) {\n      return point === \"3,3\";\n    }), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot3, \"LLFFFLFLFL\").toString(), \"2 3 S\", \"Test: 0 3 W\");\n  });\n});\n\ndescribe('cardinalPoints.js', function () {\n  it(\"CardinalPoints{}\", function () {\n    var cp = new __WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__[\"a\" /* default */]();\n    assert.strictEqual(cp.getDegree(\"N\"), 0, \"N is a point\");\n    assert.strictEqual(cp.getDegree(\"SE\"), undefined, \"SE is not a point\");\n    assert.strictEqual(cp.getPointName(270), \"W\", \"W = 270°\");\n    assert.strictEqual(cp.getPointName(271), undefined, \"271 doesnt correspond a point\");\n    assert.strictEqual(cp.isValidPoint(\"SE\"), false, \"SE is not a point\");\n  });\n});\n\ndescribe('Config & Helpers', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = -1;\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 15;\n  });\n\n  it('bounds{}', function () {\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get(\"x\") === 5, true, \"assigning a negative number to bounds will return the default of 5\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get(\"y\") === 15, true, \"assigning a positive number to bounds will return the number\");\n  });\n\n  it('isNumber()', function () {\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(null), false, \"Null test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(undefined), false, \"undefined test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(\"undefined\"), false, \"string test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(16), true, \"actual number\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(-1), true, \"a negative number is still a number\");\n  });\n});\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// tests/tests-bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 45);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5a345bf1a5c76fe0daf1","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/flag.js\n// module id = 0\n// module chunks = 0","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/config.js\n// module id = 1\n// module chunks = 0","/** module config */\n\nimport { isPositiveNumber } from './helpers';\n\n/*\n * Default values\n */\nexport const MAX_COORD = 50;\nexport const MAX_INSTRUCTION = 100;\nexport const X_BOUNDS = 5;\nexport const Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nlet x, y;\nexport const bounds = {\n  set x(value) {\n    x = (isPositiveNumber(value) && value <= MAX_COORD) ? value : X_BOUNDS;\n  },\n  set y(value) {\n    y = (isPositiveNumber(value) && value <= MAX_COORD) ? value : Y_BOUNDS;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/config.js","/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nexport function isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nexport function isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nexport function isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nconst emoji = new Map();\nemoji.set('LOST', '🆘');\nemoji.set('N', '⬆️');\nemoji.set('S', '⬇️');\nemoji.set('E', '➡️');\nemoji.set('W', '⬅️');\nemoji.set('Martian', '👾');\nemoji.set('Robot', '🤖');\n\n/*\n * matcher for str.replace\n */\nexport function strToEmoji(match) {\n  return emoji.get(match);\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nexport function beingAsEmoji(str) {\n  const regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return `${str.replace(regex, strToEmoji)}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/helpers.js","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/inspect.js\n// module id = 4\n// module chunks = 0","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/index.js\n// module id = 5\n// module chunks = 0","/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nconst _points = new WeakMap();\n\nexport default class CardinalPoints {\n  constructor() {\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n  getDegree(point) {\n    const points = _points.get(this);\n    return points.get(point.toString().toUpperCase());\n  }\n\n  /**\n   *\n   * @param   {number} degree\n   * @returns {string} Corresponding cardinal point for degree\n   */\n  getPointName(degree) {\n    const points = _points.get(this);\n    for (const [key, value] of points) {\n      if (value === Number.parseInt(degree, 10)) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal point\n   * @returns {boolean} True if point exists in Cardinal Points map\n   */\n  isValidPoint(point) {\n    const points = _points.get(this);\n    return points.has(point.toString().toUpperCase());\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/cardinalPoints.js","/** @module Martian */\n\nimport { isPositiveNumber } from './helpers';\nimport { bounds } from './config';\nimport CardinalPoints from './cardinalPoints';\n\nconst cp = new CardinalPoints();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\nexport default class Martian {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  constructor(name, x, y, orientation) {\n    this._name = (name.trim().length === 0) ? Date.now().toString() : `${name}-${Date.now()}`;\n    this._x = (isPositiveNumber(x) && x <= bounds.point.get('x')) ? x : 0;\n    this._y = (isPositiveNumber(y) && y <= bounds.point.get('y')) ? y : 0;\n    this._orientation = (cp.isValidPoint(orientation)) ? orientation.toUpperCase() : 'N';\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set x(value) {\n    this._x = value;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set y(value) {\n    this._y = value;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set orientation(value) {\n    if (cp.isValidPoint(value)) {\n      this._orientation = value.toUpperCase();\n    }\n    else {\n      throw new Error(`This orientation ${value} is not supported.`);\n    }\n  }\n\n  get orientation() {\n    return this._orientation;\n  }\n\n  get isAlive() {\n    return true;\n  }\n\n  get point() {\n    return `${this._x},${this._y}`;\n  }\n\n  /**\n   *\n   * @param   {boolean} withType = false; include object type or nah?\n   * @returns {string} being string description\n   */\n  toString(withType = false) {\n    const str = `${this._x} ${this._y} ${this._orientation}${(this.isAlive ? '' : ' LOST')}`;\n\n    if (withType) {\n      return `${this.type} ${str}`;\n    }\n    return str;\n  }\n\n  /**\n   *\n   * @param {string} direction: sets new orientation based on L/R direction\n   */\n  turn(direction) {\n    let degree = cp.getDegree(this._orientation);\n\n    if (direction.toUpperCase() === 'R') {\n      // when turning right make sure degree never becomes 360 since that value is not mapped\n      degree = (degree === 270) ? 0 : degree + 90;\n    }\n    else if (direction.toUpperCase() === 'L') {\n      // when turning left make sure degree never becomes 360 since that value is not mapped\n      degree = (degree === 0) ? 270 : degree - 90;\n    }\n\n    // orientation is defined in cardinal points so lets go back to that instead of degrees\n    this.orientation = cp.getPointName(degree);\n  }\n\n  /**\n   * orientation determines which axis to increment/decrement along\n   */\n  move() {\n    switch (this._orientation) {\n      case 'N':\n        this._y += 1;\n        break;\n      case 'S':\n        this._y -= 1;\n        break;\n      case 'E':\n        this._x += 1;\n        break;\n      case 'W':\n        this._x -= 1;\n        break;\n      default:\n        // do nothing\n    }\n  }\n\n  get type() {\n    return 'Martian';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/martian.js","/** @module Store */\n\nexport const lostList = []; // manages grid points of lost robots\n\nconst _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\nexport default class Store {\n  constructor() {\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n  add(...martian) {\n    const mars = _mars.get(this);\n\n    martian.forEach((m) => {\n      try {\n        if (['Martian', 'Robot'].includes(m.type)) {\n          mars.set(m.name, m);\n        }\n      }\n      catch (e) {\n        throw new Error('Can only store Martians and Robots.');\n      }\n    });\n\n    return mars.size;\n  }\n\n  /**\n   *\n   * @param   {object}   martian to act on\n   * @returns {boolean} reflect if boolean was successful\n   */\n  update(martian) {\n    const mars = _mars.get(this);\n\n    if (mars.has(martian.name)) {\n      mars.set(martian.name, martian);\n    }\n\n    return mars.has(martian.name);\n  }\n\n  /**\n   *\n   * @param   {string} martianName: use as key to delete from mars\n   * @returns {boolean} confirm deletion\n   */\n  remove(martianName) {\n    const mars = _mars.get(this);\n    return mars.delete(martianName);\n  }\n\n  /**\n   *\n   * @param   {string} martianName: key to retrieve\n   * @returns {object} martian/robot or undefined\n   */\n  get(martianName) {\n    const mars = _mars.get(this);\n    return mars.get(martianName);\n  }\n\n  /**\n   *\n   * @returns {Map} return all mars contents\n   */\n  getAll() {\n    const mars = _mars.get(this);\n    return mars;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/store.js","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getActual.js\n// module id = 9\n// module chunks = 0","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getName.js\n// module id = 10\n// module chunks = 0","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathInfo.js\n// module id = 11\n// module chunks = 0","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/hasProperty.js\n// module id = 12\n// module chunks = 0","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/objDisplay.js\n// module id = 13\n// module chunks = 0","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/transferFlags.js\n// module id = 14\n// module chunks = 0","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/assertion-error/index.js\n// module id = 15\n// module chunks = 0","/** @module Controller */\n\nimport { MAX_INSTRUCTION } from './config';\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log(`Invalid command received while processing '${being.name}', moving to next character.`);\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nexport function instruct(being, instructionsStr) {\n  const str = instructionsStr.trim().substring(0, MAX_INSTRUCTION);\n\n  for (let i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/controller.js","/** @module Martian Robot **/\n\nimport Martian from './martian';\nimport { isPosSafe } from './helpers';\nimport { bounds } from './config';\nimport { lostList } from './store';\n\nconst _processMotion = new WeakMap();\nconst _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\nexport default class MartianRobot extends Martian {\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  constructor(name, x, y, orientation) {\n    super(name, x, y, orientation);\n    this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(this, (tempPos, axis) => {\n      const hs = _hasScent.get(this);\n\n      switch (hs(this.point, tempPos, bounds.point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          this._isAlive = false;\n          lostList.push(this.point);\n          break;\n        case 2:\n          this[axis] = tempPos;\n          break;\n        default:\n          // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(this, (pointStr, tempPos, axisBounds) => {\n      if (lostList.find((point => point === pointStr)) &&\n        !isPosSafe(tempPos, axisBounds)) {\n        return 0;\n      }\n      else if (!isPosSafe(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n  }\n\n  set isAlive(value) {\n    if (typeof value === 'boolean') {\n      this._isAlive = value;\n    }\n    else {\n//          this._isAlive = true;\n      throw new Error('A robot can only be alive (true) or lost (false).');\n    }\n  }\n\n  get isAlive() {\n    return this._isAlive;\n  }\n\n  get type() {\n    return 'Robot';\n  }\n\n  /**\n   * orientation determines which axis to increment/decrement along\n   */\n  move() {\n    const pm = _processMotion.get(this);\n\n    switch (this._orientation) {\n      case 'N':\n        pm((this._y + 1), 'y');\n        break;\n      case 'S':\n        pm((this._y - 1), 'y');\n        break;\n      case 'E':\n        pm((this._x + 1), 'x');\n        break;\n      case 'W':\n        pm((this._x - 1), 'x');\n        break;\n      default:\n        // do nothing\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/martianRobot.js","module.exports = require('./lib/chai');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/index.js\n// module id = 18\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai.js\n// module id = 19\n// module chunks = 0","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/assertion.js\n// module id = 20\n// module chunks = 0","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/core/assertions.js\n// module id = 21\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/assert.js\n// module id = 22\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/expect.js\n// module id = 23\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/should.js\n// module id = 24\n// module chunks = 0","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addChainableMethod.js\n// module id = 25\n// module chunks = 0","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addMethod.js\n// module id = 26\n// module chunks = 0","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addProperty.js\n// module id = 27\n// module chunks = 0","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/expectTypes.js\n// module id = 28\n// module chunks = 0","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getEnumerableProperties.js\n// module id = 29\n// module chunks = 0","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getMessage.js\n// module id = 30\n// module chunks = 0","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathValue.js\n// module id = 31\n// module chunks = 0","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getProperties.js\n// module id = 32\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/index.js\n// module id = 33\n// module chunks = 0","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteChainableMethod.js\n// module id = 34\n// module chunks = 0","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteMethod.js\n// module id = 35\n// module chunks = 0","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteProperty.js\n// module id = 36\n// module chunks = 0","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/test.js\n// module id = 37\n// module chunks = 0","module.exports = require('./lib/eql');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/index.js\n// module id = 38\n// module chunks = 0","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/lib/eql.js\n// module id = 39\n// module chunks = 0","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/index.js\n// module id = 40\n// module chunks = 0","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/lib/type.js\n// module id = 41\n// module chunks = 0","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/lib/type.js\n// module id = 42\n// module chunks = 0","module.exports = require(\"buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"buffer\"\n// module id = 43\n// module chunks = 0","const chai = require('chai');\nconst expect = chai.expect, assert = chai.assert;\n\nimport { MAX_INSTRUCTION, bounds } from '../src/js/config';\nimport { isNumber, isPositiveNumber, beingAsEmoji } from '../src/js/helpers';\nimport CardinalPoints from '../src/js/cardinalPoints';\nimport { instruct } from '../src/js/controller';\nimport Martian from '../src/js/martian';\nimport Robot from '../src/js/martianRobot';\nimport { default as Store, lostList } from '../src/js/store.js';\n\ndescribe('Store', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('Storage Methods', function() {\n    const a = new Robot(\"a\", 1, 1, \"E\");\n    const b = new Robot(\"b\", 3, 2, \"N\");\n    const c = new Robot(\"c\", 0, 3, \"W\");\n    const aM = new Martian(\"aM\", 3, 2, \"N\");\n\n    const mars = new Store();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n   assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add(\"a\", 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    }\n    catch(e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, \"Return true if successfully updated.\");\n    assert.strictEqual(mars.update(\"a\"), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, \"Successfully removed\");\n    assert.strictEqual(mars.get(b.name), undefined, \"We just deleted this so this should be undefined.\");\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\ndescribe('Martians & Robots', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('Martians', function() {\n    const m = new Martian(\"\", -1, 4, \"sw\");\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = \"Byron\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, \"Byron\", \"Can't set the name after initialization.\");\n\n\n    assert.strictEqual(m.x, 0, \"Negative values are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.y, 0, \"Values above the boundary are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.point, \"0,0\", \"Invalid x,y values defaults to zero.\");\n\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will be set to north on initialization.\");\n    try {\n      m.orientation = \"se\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will fail on assignment, thus leaving the previous value.\");\n\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will be set to true on initialization.\");\n    try {\n      m.isAlive = \"fL\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will fail on assignment, thus leaving the previous value.\");\n  });\n\n  it('Robots', function() {\n    const r = new Martian(\" \", 4, 2, \"E\");\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\ndescribe('controller.js', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('instruct()', function() {\n    const bot1 = new Robot(\"bot 1\", 1, 1, \"E\"); // instruct 1 1 E RFRFRFRF\n    const bot2 = new Robot(\"bot 2\", 3, 2, \"N\"); // instruct 3 2 N FRRFLLFFRRFLL\n    const bot3 = new Robot(\"bot 3\", 0, 3, \"W\"); // instruct 0 3 W LLFFFLFLFL\n    const aMartian = new Martian(\"aMartian\", 3, 2, \"N\"); // instruct -m 3 2 N FRRFLLFFRRFLLFFF\n\n    assert.strictEqual(instruct(bot1, \"RFRFRFRF\").toString(), \"1 1 E\", \"Test: 1 1 E\");\n    assert.strictEqual(instruct(bot2, \"FRRFLLFFRRFLL\").toString(), \"3 3 N LOST\", \"Test: 3 2 N\");\n    assert.strictEqual(lostList.find((point => point === \"3,3\")), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.isAtLeast(instruct(aMartian, \"FRRFLLFFRRFLLFFF\").y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(lostList.find((point => point === \"3,3\")), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.strictEqual(instruct(bot3, \"LLFFFLFLFL\").toString(), \"2 3 S\", \"Test: 0 3 W\");\n  });\n});\n\ndescribe('cardinalPoints.js', function() {\n  it(\"CardinalPoints{}\", function() {\n      const cp = new CardinalPoints();\n      assert.strictEqual(cp.getDegree(\"N\"), 0, \"N is a point\");\n      assert.strictEqual(cp.getDegree(\"SE\"), undefined, \"SE is not a point\");\n      assert.strictEqual(cp.getPointName(270), \"W\", \"W = 270°\");\n      assert.strictEqual(cp.getPointName(271), undefined, \"271 doesnt correspond a point\");\n      assert.strictEqual(cp.isValidPoint(\"SE\"), false, \"SE is not a point\");\n  });\n});\n\ndescribe('Config & Helpers', function() {\n  before(function() {\n    bounds.x = -1;\n    bounds.y = 15;\n  });\n\n  it('bounds{}', function() {\n    assert.strictEqual(bounds.point.get(\"x\") === 5, true, \"assigning a negative number to bounds will return the default of 5\");\n    assert.strictEqual(bounds.point.get(\"y\") === 15, true, \"assigning a positive number to bounds will return the number\");\n  });\n\n  it('isNumber()', function() {\n    assert.strictEqual(isNumber(null), false, \"Null test\");\n    assert.strictEqual(isNumber(undefined), false, \"undefined test\");\n    assert.strictEqual(isNumber(\"undefined\"), false, \"string test\");\n    assert.strictEqual(isNumber(16), true, \"actual number\");\n    assert.strictEqual(isNumber(-1), true, \"a negative number is still a number\");\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./tests/tests.js"],"sourceRoot":""}