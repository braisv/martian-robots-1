{"version":3,"sources":["webpack:///tests/tests-bundle.js","webpack:///webpack/bootstrap 247fc13d22f362343c60?d7d2","webpack:///./~/chai/lib/chai/utils/inspect.js","webpack:///./~/chai/~/type-detect/index.js","webpack:///./~/chai/lib/chai/utils/getActual.js","webpack:///./~/chai/lib/chai/utils/getName.js","webpack:///./~/chai/lib/chai/utils/getPathInfo.js","webpack:///./~/chai/lib/chai/utils/hasProperty.js","webpack:///./~/chai/lib/chai/utils/objDisplay.js","webpack:///./~/chai/lib/chai/utils/transferFlags.js","webpack:///./~/chai/~/assertion-error/index.js","webpack:///./~/chai/index.js","webpack:///./src/js/config.js?3eab","webpack:///./src/js/helpers.js?f1c6","webpack:///./~/chai/lib/chai.js","webpack:///./~/chai/lib/chai/assertion.js","webpack:///./~/chai/lib/chai/core/assertions.js","webpack:///./~/chai/lib/chai/interface/assert.js","webpack:///./~/chai/lib/chai/interface/expect.js","webpack:///./~/chai/lib/chai/interface/should.js","webpack:///./~/chai/lib/chai/utils/addChainableMethod.js","webpack:///./~/chai/lib/chai/utils/addMethod.js","webpack:///./~/chai/lib/chai/utils/addProperty.js","webpack:///./~/chai/lib/chai/utils/expectTypes.js","webpack:///./~/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./~/chai/lib/chai/utils/getMessage.js","webpack:///./~/chai/lib/chai/utils/getPathValue.js","webpack:///./~/chai/lib/chai/utils/getProperties.js","webpack:///./~/chai/lib/chai/utils/index.js","webpack:///./~/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteProperty.js","webpack:///./~/chai/lib/chai/utils/test.js","webpack:///./~/chai/~/deep-eql/index.js","webpack:///./~/chai/~/deep-eql/lib/eql.js","webpack:///./~/chai/~/deep-eql/~/type-detect/index.js","webpack:///./~/chai/~/deep-eql/~/type-detect/lib/type.js","webpack:///./~/chai/~/type-detect/lib/type.js","webpack:///external \"buffer\"","webpack:///./tests/tests.js","webpack:///./~/chai/lib/chai/utils/flag.js","webpack:///./src/js/martian.js?3e86","webpack:///./src/js/store.js?8b22","webpack:///./~/chai/lib/chai/config.js","webpack:///./src/js/cardinalPoints.js?0f89","webpack:///./src/js/controller.js?05fb","webpack:///./src/js/martianRobot.js?6d51"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","108","inspect","obj","showHidden","depth","colors","ctx","seen","stylize","str","formatValue","recurseTimes","constructor","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","replace","err","visibleKeys","getEnumerableProperties","keys","getProperties","length","isError","getName","nameSuffix","isRegExp","RegExp","toString","isDate","Date","toUTCString","formatError","base","array","braces","isArray","push","output","formatArray","map","key","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","Infinity","Error","String","forEach","match","__lookupGetter__","__lookupSetter__","indexOf","split","line","join","substr","numLinesEst","reduce","prev","cur","ar","Array","objectToString","re","e","HTMLElement","nodeType","nodeName","109","141","args","_obj","142","func","exec","143","parsePath","path","parts","mArr","parseFloat","_getPathValue","parsed","index","res","tmp","undefined","part","hasProperty","last","info","parent","exists","144","type","literals","number","Number","string","ot","145","config","truncateThreshold","kstr","splice","146","assertion","includeAll","flags","__flags","create","arguments","flag","147","exclude","excludeProps","excludes","slice","AssertionError","message","_props","ssf","extend","props","this","showDiff","callee","captureStackTrace","stack","toJSON","155","23","__WEBPACK_IMPORTED_MODULE_0__helpers__","MAX_INSTRUCTION","bounds","MAX_COORD","X_BOUNDS","Y_BOUNDS","x","y","point","Map","24","isNumber","test","isPositiveNumber","isPosSafe","pos","posBounds","parseInt","strToEmoji","emoji","beingAsEmoji","regex","set","340","used","version","util","use","fn","core","expect","should","assert","341","_chai","Assertion","msg","console","warn","includeStack","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","getMessage","actual","getActual","val","342","chai","_","an","toLowerCase","article","charAt","includeChainingBehavior","include","expectTypes","eql","k","subset","checkArguments","assertEqual","assertEql","assertAbove","to","have","len","assertLeast","assertBelow","assertMost","assertInstanceOf","assertOwnProperty","assertOwnPropertyDescriptor","descriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","mixedArgsMsg","any","all","intersection","filter","every","sort","assertThrows","errMsg","is","a","thrown","desiredError","thrownError","actuallyGot","expectedThrown","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","negate","closeTo","delta","Math","abs","isSubsetOf","superset","cmp","elem","some","elem2","oneOf","list","be","assertChanges","prop","initial","assertIncreases","assertDecreases","chain","isNaN","start","finish","range","isDeep","pathInfo","getPathInfo","isExtensible","TypeError","isSealed","isFrozen","343","express","errmsg","fail","operator","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","throws","errt","errs","assertErr","throw","doesNotThrow","Throw","val2","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as","344","345","loadShould","shouldGetter","Boolean","valueOf","shouldSetter","writable","val1","exist","Should","346","transferFlags","hasProtoSupport","excludeNames","Function","apply","chainableBehavior","__methods","old_ssfi","__proto__","asserterNames","getOwnPropertyNames","asserterName","pd","347","348","349","types","t","art","or","350","351","flagMsg","352","353","proto","getPrototypeOf","354","getPathValue","355","_chainingBehavior","_method","356","_super","357","_get","358","359","360","b","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","ex","361","362","getType","natives","Library","tests","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","of","define","ReferenceError","363","objectTypeRegexp","Promise","424","require","429","__WEBPACK_IMPORTED_MODULE_0__src_js_config__","__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__","__WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__","__WEBPACK_IMPORTED_MODULE_3__src_js_controller__","__WEBPACK_IMPORTED_MODULE_4__src_js_martian__","__WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__","__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__","describe","before","it","aM","mars","getAll","size","add","log","update","remove","orientation","isAlive","r","bot1","bot2","bot3","aMartian","find","cp","getDegree","getPointName","isValidPoint","46","49","_classCallCheck","instance","Constructor","__WEBPACK_IMPORTED_MODULE_1__config__","__WEBPACK_IMPORTED_MODULE_2__cardinalPoints__","_createClass","defineProperties","target","protoProps","staticProps","Martian","_name","trim","now","_x","_y","_orientation","toUpperCase","withType","direction","degree","50","lostList","_mars","WeakMap","Store","_len","martian","_key","includes","has","martianName","delete","56","63","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","_points","CardinalPoints","points","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_step$value","return","64","_processCommands","char","being","turn","move","instruct","instructionsStr","substring","__WEBPACK_IMPORTED_MODULE_0__config__","65","_possibleConstructorReturn","self","_inherits","subClass","superClass","setPrototypeOf","__WEBPACK_IMPORTED_MODULE_0__martian__","__WEBPACK_IMPORTED_MODULE_1__helpers__","__WEBPACK_IMPORTED_MODULE_2__config__","__WEBPACK_IMPORTED_MODULE_3__store__","_processMotion","_hasScent","MartianRobot","_Martian","_this","_isAlive","tempPos","axis","hs","pointStr","axisBounds","pm"],"mappings":"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","file":"tests/tests-bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 429);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 108:\n/***/ function(module, exports, __webpack_require__) {\n\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = __webpack_require__(142);\nvar getProperties = __webpack_require__(353);\nvar getEnumerableProperties = __webpack_require__(350);\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n/***/ },\n\n/***/ 109:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(363);\n\n\n/***/ },\n\n/***/ 141:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n/***/ },\n\n/***/ 142:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n/***/ },\n\n/***/ 143:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = __webpack_require__(144);\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n/***/ },\n\n/***/ 144:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = __webpack_require__(109);\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n/***/ },\n\n/***/ 145:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = __webpack_require__(108);\nvar config = __webpack_require__(56);\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n/***/ },\n\n/***/ 146:\n/***/ function(module, exports) {\n\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n/***/ },\n\n/***/ 147:\n/***/ function(module, exports) {\n\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n/***/ },\n\n/***/ 155:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(340);\n\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(24);\n/* unused harmony export MAX_COORD */\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return MAX_INSTRUCTION; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return bounds; });\n/** module config */\n\n\n\n/*\n * Default values\n */\nvar MAX_COORD = 50;\nvar MAX_INSTRUCTION = 100;\nvar X_BOUNDS = 5,\n    Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nvar x = void 0,\n    y = void 0;\nvar bounds = {\n  set x(value) {\n    x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : X_BOUNDS;\n  },\n  set y(value) {\n    y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : Y_BOUNDS;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  }\n};\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ exports[\"d\"] = isNumber;\n/* harmony export (immutable) */ exports[\"a\"] = isPositiveNumber;\n/* harmony export (immutable) */ exports[\"b\"] = isPosSafe;\n/* unused harmony export strToEmoji */\n/* harmony export (immutable) */ exports[\"c\"] = beingAsEmoji;\n/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nfunction isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nfunction isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nfunction isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nvar emoji = new Map();\nemoji.set('LOST', '🆘');\nemoji.set('N', '⬆️');\nemoji.set('S', '⬇️');\nemoji.set('E', '➡️');\nemoji.set('W', '⬅️');\nemoji.set('Martian', '👾');\nemoji.set('Robot', '🤖');\n\n/*\n * matcher for str.replace\n */\nfunction strToEmoji(match) {\n  return emoji.get(match);\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nfunction beingAsEmoji(str) {\n  var regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return '' + str.replace(regex, strToEmoji);\n}\n\n/***/ },\n\n/***/ 340:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = __webpack_require__(147);\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = __webpack_require__(354);\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = __webpack_require__(56);\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = __webpack_require__(341);\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = __webpack_require__(342);\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = __webpack_require__(344);\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = __webpack_require__(345);\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = __webpack_require__(343);\nexports.use(assert);\n\n\n/***/ },\n\n/***/ 341:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(56);\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n/***/ },\n\n/***/ 342:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n/***/ },\n\n/***/ 343:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n/***/ },\n\n/***/ 344:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n/***/ },\n\n/***/ 345:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n/***/ },\n\n/***/ 346:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = __webpack_require__(146);\nvar flag = __webpack_require__(46);\nvar config = __webpack_require__(56);\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 347:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(56);\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = __webpack_require__(46);\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n\n/***/ 348:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(56);\nvar flag = __webpack_require__(46);\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 349:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = __webpack_require__(147);\nvar flag = __webpack_require__(46);\nvar type = __webpack_require__(109);\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n/***/ },\n\n/***/ 350:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n/***/ },\n\n/***/ 351:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(46)\n  , getActual = __webpack_require__(141)\n  , inspect = __webpack_require__(108)\n  , objDisplay = __webpack_require__(145);\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n/***/ },\n\n/***/ 352:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = __webpack_require__(143);\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n/***/ },\n\n/***/ 353:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n/***/ },\n\n/***/ 354:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = __webpack_require__(358);\n\n/*!\n * type utility\n */\n\nexports.type = __webpack_require__(109);\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = __webpack_require__(349);\n\n/*!\n * message utility\n */\n\nexports.getMessage = __webpack_require__(351);\n\n/*!\n * actual utility\n */\n\nexports.getActual = __webpack_require__(141);\n\n/*!\n * Inspect util\n */\n\nexports.inspect = __webpack_require__(108);\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = __webpack_require__(145);\n\n/*!\n * Flag utility\n */\n\nexports.flag = __webpack_require__(46);\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = __webpack_require__(146);\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = __webpack_require__(359);\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = __webpack_require__(352);\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = __webpack_require__(143);\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = __webpack_require__(144);\n\n/*!\n * Function name\n */\n\nexports.getName = __webpack_require__(142);\n\n/*!\n * add Property\n */\n\nexports.addProperty = __webpack_require__(348);\n\n/*!\n * add Method\n */\n\nexports.addMethod = __webpack_require__(347);\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = __webpack_require__(357);\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = __webpack_require__(356);\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = __webpack_require__(346);\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = __webpack_require__(355);\n\n\n/***/ },\n\n/***/ 355:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n\n/***/ 356:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n/***/ },\n\n/***/ 357:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 358:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(46);\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n/***/ },\n\n/***/ 359:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(360);\n\n\n/***/ },\n\n/***/ 360:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = __webpack_require__(361);\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = __webpack_require__(424).Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n/***/ },\n\n/***/ 361:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(362);\n\n\n/***/ },\n\n/***/ 362:\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n\n/***/ 363:\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n\n/***/ 424:\n/***/ function(module, exports) {\n\nmodule.exports = require(\"buffer\");\n\n/***/ },\n\n/***/ 429:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_config__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_helpers__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_js_controller__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_js_martian__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_js_store_js__ = __webpack_require__(50);\nvar chai = __webpack_require__(155);\nvar expect = chai.expect,\n    assert = chai.assert;\n\n\n\n\n\n\n\n\n\ndescribe('Store', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Storage Methods', function () {\n    var a = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"a\", 1, 1, \"E\");\n    var b = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"b\", 3, 2, \"N\");\n    var c = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"c\", 0, 3, \"W\");\n    var aM = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"aM\", 3, 2, \"N\");\n\n    var mars = new __WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"b\" /* default */]();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n    assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add(\"a\", 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    } catch (e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, \"Return true if successfully updated.\");\n    assert.strictEqual(mars.update(\"a\"), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, \"Successfully removed\");\n    assert.strictEqual(mars.get(b.name), undefined, \"We just deleted this so this should be undefined.\");\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\ndescribe('Martians & Robots', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Martians', function () {\n    var m = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"\", -1, 4, \"sw\");\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = \"Byron\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, \"Byron\", \"Can't set the name after initialization.\");\n\n    assert.strictEqual(m.x, 0, \"Negative values are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.y, 0, \"Values above the boundary are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.point, \"0,0\", \"Invalid x,y values defaults to zero.\");\n\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will be set to north on initialization.\");\n    try {\n      m.orientation = \"se\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will fail on assignment, thus leaving the previous value.\");\n\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will be set to true on initialization.\");\n    try {\n      m.isAlive = \"fL\";\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will fail on assignment, thus leaving the previous value.\");\n  });\n\n  it('Robots', function () {\n    var r = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\" \", 4, 2, \"E\");\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\ndescribe('controller.js', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('instruct()', function () {\n    var bot1 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 1\", 1, 1, \"E\");\n    var bot2 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 2\", 3, 2, \"N\");\n    var bot3 = new __WEBPACK_IMPORTED_MODULE_5__src_js_martianRobot__[\"a\" /* default */](\"bot 3\", 0, 3, \"W\");\n    var aMartian = new __WEBPACK_IMPORTED_MODULE_4__src_js_martian__[\"a\" /* default */](\"aMartian\", 3, 2, \"N\"); // initialized the same as bot 2\n\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot1, \"RFRFRFRF\").toString(), \"1 1 E\", \"Test: 1 1 E\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot2, \"FRRFLLFFRRFLL\").toString(), \"3 3 N LOST\", \"Test: 3 2 N\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"a\" /* lostList */].find(function (point) {\n      return point === \"3,3\";\n    }), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.isAtLeast(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(aMartian, \"FRRFLLFFRRFLLFFF\").y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_6__src_js_store_js__[\"a\" /* lostList */].find(function (point) {\n      return point === \"3,3\";\n    }), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__src_js_controller__[\"a\" /* instruct */])(bot3, \"LLFFFLFLFL\").toString(), \"2 3 S\", \"Test: 0 3 W\");\n  });\n});\n\ndescribe('cardinalPoints.js', function () {\n  it(\"CardinalPoints{}\", function () {\n    var cp = new __WEBPACK_IMPORTED_MODULE_2__src_js_cardinalPoints__[\"a\" /* default */]();\n    assert.strictEqual(cp.getDegree(\"N\"), 0, \"N is a point\");\n    assert.strictEqual(cp.getDegree(\"SE\"), undefined, \"SE is not a point\");\n    assert.strictEqual(cp.getPointName(270), \"W\", \"W = 270°\");\n    assert.strictEqual(cp.getPointName(271), undefined, \"271 doesnt correspond a point\");\n    assert.strictEqual(cp.isValidPoint(\"SE\"), false, \"SE is not a point\");\n  });\n});\n\ndescribe('Config & Helpers', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = -1;\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 15;\n  });\n\n  it('bounds{}', function () {\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get(\"x\") === 5, true, \"assigning a negative number to bounds will return the default of 5\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get(\"y\") === 15, true, \"assigning a positive number to bounds will return the number\");\n  });\n\n  it('isNumber()', function () {\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(null), false, \"Null test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(undefined), false, \"undefined test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(\"undefined\"), false, \"string test\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(16), true, \"actual number\");\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(-1), true, \"a negative number is still a number\");\n  });\n});\n\n/***/ },\n\n/***/ 46:\n/***/ function(module, exports) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__ = __webpack_require__(63);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Martian */\n\n\n\n\n\nvar cp = new __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__[\"a\" /* default */]();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\n\nvar Martian = function () {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  function Martian(name, x, y, orientation) {\n    _classCallCheck(this, Martian);\n\n    this._name = name.trim().length === 0 ? Date.now().toString() : name + '-' + Date.now();\n    this._x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(x) && x <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('x') ? x : 0;\n    this._y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(y) && y <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('y') ? y : 0;\n    this._orientation = cp.isValidPoint(orientation) ? orientation.toUpperCase() : 'N';\n  }\n\n  _createClass(Martian, [{\n    key: 'toString',\n\n\n    /**\n     *\n     * @param   {boolean} withType = false; include object type or nah?\n     * @returns {string} being string description\n     */\n    value: function toString() {\n      var withType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var str = this._x + ' ' + this._y + ' ' + this._orientation + (this.isAlive ? '' : ' LOST');\n\n      if (withType) {\n        return this.type + ' - ' + str;\n      }\n      return str;\n    }\n\n    /**\n     *\n     * @param {string} direction: sets new orientation based on L/R direction\n     */\n\n  }, {\n    key: 'turn',\n    value: function turn(direction) {\n      var degree = cp.getDegree(this._orientation);\n\n      if (direction.toUpperCase() === 'R') {\n        // when turning right make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 270 ? 0 : degree + 90;\n      } else if (direction.toUpperCase() === 'L') {\n        // when turning left make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 0 ? 270 : degree - 90;\n      }\n\n      // orientation is defined in cardinal points so lets go back to that instead of degrees\n      this.orientation = cp.getPointName(degree);\n    }\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n\n  }, {\n    key: 'move',\n    value: function move() {\n      switch (this._orientation) {\n        case 'N':\n          this._y += 1;\n          break;\n        case 'S':\n          this._y -= 1;\n          break;\n        case 'E':\n          this._x += 1;\n          break;\n        case 'W':\n          this._x -= 1;\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: 'x',\n    set: function set(value) {\n      this._x = value;\n    },\n    get: function get() {\n      return this._x;\n    }\n  }, {\n    key: 'y',\n    set: function set(value) {\n      this._y = value;\n    },\n    get: function get() {\n      return this._y;\n    }\n  }, {\n    key: 'orientation',\n    set: function set(value) {\n      if (cp.isValidPoint(value)) {\n        this._orientation = value.toUpperCase();\n      } else {\n        throw new Error('This orientation ' + value + ' is not supported.');\n      }\n    },\n    get: function get() {\n      return this._orientation;\n    }\n  }, {\n    key: 'isAlive',\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: 'point',\n    get: function get() {\n      return this._x + ',' + this._y;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Martian';\n    }\n  }]);\n\n  return Martian;\n}();\n\n/* harmony default export */ exports[\"a\"] = Martian;\n\n/***/ },\n\n/***/ 50:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return lostList; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Store */\n\nvar lostList = []; // manages grid points of lost robots\n\nvar _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\n\nvar Store = function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n\n\n  _createClass(Store, [{\n    key: 'add',\n    value: function add() {\n      var mars = _mars.get(this);\n\n      for (var _len = arguments.length, martian = Array(_len), _key = 0; _key < _len; _key++) {\n        martian[_key] = arguments[_key];\n      }\n\n      martian.forEach(function (m) {\n        try {\n          if (['Martian', 'Robot'].includes(m.type)) {\n            mars.set(m.name, m);\n          }\n        } catch (e) {\n          throw new Error('Can only store Martians and Robots.');\n        }\n      });\n\n      return mars.size;\n    }\n\n    /**\n     *\n     * @param   {object}   martian to act on\n     * @returns {boolean} reflect if boolean was successful\n     */\n\n  }, {\n    key: 'update',\n    value: function update(martian) {\n      var mars = _mars.get(this);\n\n      if (mars.has(martian.name)) {\n        mars.set(martian.name, martian);\n      }\n\n      return mars.has(martian.name);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: use as key to delete from mars\n     * @returns {boolean} confirm deletion\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(martianName) {\n      var mars = _mars.get(this);\n      return mars.delete(martianName);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: key to retrieve\n     * @returns {object} martian/robot or undefined\n     */\n\n  }, {\n    key: 'get',\n    value: function get(martianName) {\n      var mars = _mars.get(this);\n      return mars.get(martianName);\n    }\n\n    /**\n     *\n     * @returns {Map} return all mars contents\n     */\n\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      var mars = _mars.get(this);\n      return mars;\n    }\n  }]);\n\n  return Store;\n}();\n\n/* harmony default export */ exports[\"b\"] = Store;\n\n/***/ },\n\n/***/ 56:\n/***/ function(module, exports) {\n\nmodule.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nvar _points = new WeakMap();\n\nvar CardinalPoints = function () {\n  function CardinalPoints() {\n    _classCallCheck(this, CardinalPoints);\n\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n\n\n  _createClass(CardinalPoints, [{\n    key: 'getDegree',\n    value: function getDegree(point) {\n      var points = _points.get(this);\n      return points.get(point.toString().toUpperCase());\n    }\n\n    /**\n     *\n     * @param   {number} degree\n     * @returns {string} Corresponding cardinal point for degree\n     */\n\n  }, {\n    key: 'getPointName',\n    value: function getPointName(degree) {\n      var points = _points.get(this);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          var key = _step$value[0];\n          var value = _step$value[1];\n\n          if (value === Number.parseInt(degree, 10)) {\n            return key;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    /**\n     *\n     * @param   {string} Cardinal point\n     * @returns {boolean} True if point exists in Cardinal Points map\n     */\n\n  }, {\n    key: 'isValidPoint',\n    value: function isValidPoint(point) {\n      var points = _points.get(this);\n      return points.has(point.toString().toUpperCase());\n    }\n  }]);\n\n  return CardinalPoints;\n}();\n\n/* harmony default export */ exports[\"a\"] = CardinalPoints;\n\n/***/ },\n\n/***/ 64:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(23);\n/* harmony export (immutable) */ exports[\"a\"] = instruct;\n/** @module Controller */\n\n\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log('Invalid command received while processing \\'' + being.name + '\\', moving to next character.');\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nfunction instruct(being, instructionsStr) {\n  var str = instructionsStr.trim().substring(0, __WEBPACK_IMPORTED_MODULE_0__config__[\"b\" /* MAX_INSTRUCTION */]);\n\n  for (var i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n/***/ },\n\n/***/ 65:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__martian__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__store__ = __webpack_require__(50);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @module Martian Robot **/\n\n\n\n\n\n\nvar _processMotion = new WeakMap();\nvar _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\n\nvar MartianRobot = function (_Martian) {\n  _inherits(MartianRobot, _Martian);\n\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  function MartianRobot(name, x, y, orientation) {\n    _classCallCheck(this, MartianRobot);\n\n    var _this = _possibleConstructorReturn(this, (MartianRobot.__proto__ || Object.getPrototypeOf(MartianRobot)).call(this, name, x, y, orientation));\n\n    _this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(_this, function (tempPos, axis) {\n      var hs = _hasScent.get(_this);\n\n      switch (hs(_this.point, tempPos, __WEBPACK_IMPORTED_MODULE_2__config__[\"a\" /* bounds */].point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          _this._isAlive = false;\n          __WEBPACK_IMPORTED_MODULE_3__store__[\"a\" /* lostList */].push(_this.point);\n          break;\n        case 2:\n          _this[axis] = tempPos;\n          break;\n        default:\n        // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(_this, function (pointStr, tempPos, axisBounds) {\n      if (__WEBPACK_IMPORTED_MODULE_3__store__[\"a\" /* lostList */].find(function (point) {\n        return point === pointStr;\n      }) && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 0;\n      } else if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n    return _this;\n  }\n\n  _createClass(MartianRobot, [{\n    key: 'move',\n\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n    value: function move() {\n      var pm = _processMotion.get(this);\n\n      switch (this._orientation) {\n        case 'N':\n          pm(this._y + 1, 'y');\n          break;\n        case 'S':\n          pm(this._y - 1, 'y');\n          break;\n        case 'E':\n          pm(this._x + 1, 'x');\n          break;\n        case 'W':\n          pm(this._x - 1, 'x');\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'isAlive',\n    set: function set(value) {\n      if (typeof value === 'boolean') {\n        this._isAlive = value;\n      } else {\n        //          this._isAlive = true;\n        throw new Error('A robot can only be alive (true) or lost (false).');\n      }\n    },\n    get: function get() {\n      return this._isAlive;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Robot';\n    }\n  }]);\n\n  return MartianRobot;\n}(__WEBPACK_IMPORTED_MODULE_0__martian__[\"a\" /* default */]);\n\n/* harmony default export */ exports[\"a\"] = MartianRobot;\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// tests/tests-bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 429);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 247fc13d22f362343c60","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/inspect.js\n// module id = 108\n// module chunks = 1","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/index.js\n// module id = 109\n// module chunks = 1","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getActual.js\n// module id = 141\n// module chunks = 1","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getName.js\n// module id = 142\n// module chunks = 1","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathInfo.js\n// module id = 143\n// module chunks = 1","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/hasProperty.js\n// module id = 144\n// module chunks = 1","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/objDisplay.js\n// module id = 145\n// module chunks = 1","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/transferFlags.js\n// module id = 146\n// module chunks = 1","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/assertion-error/index.js\n// module id = 147\n// module chunks = 1","module.exports = require('./lib/chai');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/index.js\n// module id = 155\n// module chunks = 1","/** module config */\n\nimport { isPositiveNumber } from './helpers';\n\n/*\n * Default values\n */\nexport const MAX_COORD = 50;\nexport const MAX_INSTRUCTION = 100;\nconst X_BOUNDS = 5, Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nlet x, y;\nexport const bounds = {\n  set x(value) {\n    x = (isPositiveNumber(value) && value <= MAX_COORD) ? value : X_BOUNDS;\n  },\n  set y(value) {\n    y = (isPositiveNumber(value) && value <= MAX_COORD) ? value : Y_BOUNDS;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/config.js","/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nexport function isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nexport function isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nexport function isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nconst emoji = new Map();\nemoji.set('LOST', '🆘');\nemoji.set('N', '⬆️');\nemoji.set('S', '⬇️');\nemoji.set('E', '➡️');\nemoji.set('W', '⬅️');\nemoji.set('Martian', '👾');\nemoji.set('Robot', '🤖');\n\n/*\n * matcher for str.replace\n */\nexport function strToEmoji(match) {\n  return emoji.get(match);\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nexport function beingAsEmoji(str) {\n  const regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return `${str.replace(regex, strToEmoji)}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/helpers.js","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai.js\n// module id = 340\n// module chunks = 1","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/assertion.js\n// module id = 341\n// module chunks = 1","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/core/assertions.js\n// module id = 342\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/assert.js\n// module id = 343\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/expect.js\n// module id = 344\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/should.js\n// module id = 345\n// module chunks = 1","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addChainableMethod.js\n// module id = 346\n// module chunks = 1","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addMethod.js\n// module id = 347\n// module chunks = 1","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addProperty.js\n// module id = 348\n// module chunks = 1","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/expectTypes.js\n// module id = 349\n// module chunks = 1","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getEnumerableProperties.js\n// module id = 350\n// module chunks = 1","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getMessage.js\n// module id = 351\n// module chunks = 1","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathValue.js\n// module id = 352\n// module chunks = 1","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getProperties.js\n// module id = 353\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/index.js\n// module id = 354\n// module chunks = 1","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteChainableMethod.js\n// module id = 355\n// module chunks = 1","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteMethod.js\n// module id = 356\n// module chunks = 1","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteProperty.js\n// module id = 357\n// module chunks = 1","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/test.js\n// module id = 358\n// module chunks = 1","module.exports = require('./lib/eql');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/index.js\n// module id = 359\n// module chunks = 1","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/lib/eql.js\n// module id = 360\n// module chunks = 1","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/index.js\n// module id = 361\n// module chunks = 1","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/lib/type.js\n// module id = 362\n// module chunks = 1","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/lib/type.js\n// module id = 363\n// module chunks = 1","module.exports = require(\"buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"buffer\"\n// module id = 424\n// module chunks = 1","const chai = require('chai');\nconst expect = chai.expect, assert = chai.assert;\n\nimport { MAX_INSTRUCTION, bounds } from '../src/js/config';\nimport { isNumber, isPositiveNumber, beingAsEmoji } from '../src/js/helpers';\nimport CardinalPoints from '../src/js/cardinalPoints';\nimport { instruct } from '../src/js/controller';\nimport Martian from '../src/js/martian';\nimport Robot from '../src/js/martianRobot';\nimport { default as Store, lostList } from '../src/js/store.js';\n\ndescribe('Store', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('Storage Methods', function() {\n    const a = new Robot(\"a\", 1, 1, \"E\");\n    const b = new Robot(\"b\", 3, 2, \"N\");\n    const c = new Robot(\"c\", 0, 3, \"W\");\n    const aM = new Martian(\"aM\", 3, 2, \"N\");\n\n    const mars = new Store();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n   assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add(\"a\", 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    }\n    catch(e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, \"Return true if successfully updated.\");\n    assert.strictEqual(mars.update(\"a\"), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, \"Successfully removed\");\n    assert.strictEqual(mars.get(b.name), undefined, \"We just deleted this so this should be undefined.\");\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\ndescribe('Martians & Robots', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('Martians', function() {\n    const m = new Martian(\"\", -1, 4, \"sw\");\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = \"Byron\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, \"Byron\", \"Can't set the name after initialization.\");\n\n\n    assert.strictEqual(m.x, 0, \"Negative values are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.y, 0, \"Values above the boundary are invalid for initialization, defaults to zero.\");\n    assert.strictEqual(m.point, \"0,0\", \"Invalid x,y values defaults to zero.\");\n\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will be set to north on initialization.\");\n    try {\n      m.orientation = \"se\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, \"N\", \"Invalid orientations will fail on assignment, thus leaving the previous value.\");\n\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will be set to true on initialization.\");\n    try {\n      m.isAlive = \"fL\";\n    }\n    catch(e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, \"Invalid live status will fail on assignment, thus leaving the previous value.\");\n  });\n\n  it('Robots', function() {\n    const r = new Martian(\" \", 4, 2, \"E\");\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\ndescribe('controller.js', function() {\n  before(function() {\n    bounds.x = 5; bounds.y = 3;\n  });\n\n  it('instruct()', function() {\n    const bot1 = new Robot(\"bot 1\", 1, 1, \"E\");\n    const bot2 = new Robot(\"bot 2\", 3, 2, \"N\");\n    const bot3 = new Robot(\"bot 3\", 0, 3, \"W\");\n    const aMartian = new Martian(\"aMartian\", 3, 2, \"N\"); // initialized the same as bot 2\n\n    assert.strictEqual(instruct(bot1, \"RFRFRFRF\").toString(), \"1 1 E\", \"Test: 1 1 E\");\n    assert.strictEqual(instruct(bot2, \"FRRFLLFFRRFLL\").toString(), \"3 3 N LOST\", \"Test: 3 2 N\");\n    assert.strictEqual(lostList.find((point => point === \"3,3\")), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.isAtLeast(instruct(aMartian, \"FRRFLLFFRRFLLFFF\").y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(lostList.find((point => point === \"3,3\")), \"3,3\", \"confirm that the position of the lost robot is added to the list\");\n    assert.strictEqual(instruct(bot3, \"LLFFFLFLFL\").toString(), \"2 3 S\", \"Test: 0 3 W\");\n  });\n});\n\ndescribe('cardinalPoints.js', function() {\n  it(\"CardinalPoints{}\", function() {\n      const cp = new CardinalPoints();\n      assert.strictEqual(cp.getDegree(\"N\"), 0, \"N is a point\");\n      assert.strictEqual(cp.getDegree(\"SE\"), undefined, \"SE is not a point\");\n      assert.strictEqual(cp.getPointName(270), \"W\", \"W = 270°\");\n      assert.strictEqual(cp.getPointName(271), undefined, \"271 doesnt correspond a point\");\n      assert.strictEqual(cp.isValidPoint(\"SE\"), false, \"SE is not a point\");\n  });\n});\n\ndescribe('Config & Helpers', function() {\n  before(function() {\n    bounds.x = -1;\n    bounds.y = 15;\n  });\n\n  it('bounds{}', function() {\n    assert.strictEqual(bounds.point.get(\"x\") === 5, true, \"assigning a negative number to bounds will return the default of 5\");\n    assert.strictEqual(bounds.point.get(\"y\") === 15, true, \"assigning a positive number to bounds will return the number\");\n  });\n\n  it('isNumber()', function() {\n    assert.strictEqual(isNumber(null), false, \"Null test\");\n    assert.strictEqual(isNumber(undefined), false, \"undefined test\");\n    assert.strictEqual(isNumber(\"undefined\"), false, \"string test\");\n    assert.strictEqual(isNumber(16), true, \"actual number\");\n    assert.strictEqual(isNumber(-1), true, \"a negative number is still a number\");\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./tests/tests.js","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/flag.js\n// module id = 46\n// module chunks = 1","/** @module Martian */\n\nimport { isPositiveNumber } from './helpers';\nimport { bounds } from './config';\nimport CardinalPoints from './cardinalPoints';\n\nconst cp = new CardinalPoints();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\nexport default class Martian {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  constructor(name, x, y, orientation) {\n    this._name = (name.trim().length === 0) ? Date.now().toString() : `${name}-${Date.now()}`;\n    this._x = (isPositiveNumber(x) && x <= bounds.point.get('x')) ? x : 0;\n    this._y = (isPositiveNumber(y) && y <= bounds.point.get('y')) ? y : 0;\n    this._orientation = (cp.isValidPoint(orientation)) ? orientation.toUpperCase() : 'N';\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set x(value) {\n    this._x = value;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set y(value) {\n    this._y = value;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set orientation(value) {\n    if (cp.isValidPoint(value)) {\n      this._orientation = value.toUpperCase();\n    }\n    else {\n      throw new Error(`This orientation ${value} is not supported.`);\n    }\n  }\n\n  get orientation() {\n    return this._orientation;\n  }\n\n  get isAlive() {\n    return true;\n  }\n\n  get point() {\n    return `${this._x},${this._y}`;\n  }\n\n  /**\n   *\n   * @param   {boolean} withType = false; include object type or nah?\n   * @returns {string} being string description\n   */\n  toString(withType = false) {\n    const str = `${this._x} ${this._y} ${this._orientation}${(this.isAlive ? '' : ' LOST')}`;\n\n    if (withType) {\n      return `${this.type} - ${str}`;\n    }\n    return str;\n  }\n\n  /**\n   *\n   * @param {string} direction: sets new orientation based on L/R direction\n   */\n  turn(direction) {\n    let degree = cp.getDegree(this._orientation);\n\n    if (direction.toUpperCase() === 'R') {\n      // when turning right make sure degree never becomes 360 since that value is not mapped\n      degree = (degree === 270) ? 0 : degree + 90;\n    }\n    else if (direction.toUpperCase() === 'L') {\n      // when turning left make sure degree never becomes 360 since that value is not mapped\n      degree = (degree === 0) ? 270 : degree - 90;\n    }\n\n    // orientation is defined in cardinal points so lets go back to that instead of degrees\n    this.orientation = cp.getPointName(degree);\n  }\n\n  /**\n   * orientation determines which axis to increment/decrement along\n   */\n  move() {\n    switch (this._orientation) {\n      case 'N':\n        this._y += 1;\n        break;\n      case 'S':\n        this._y -= 1;\n        break;\n      case 'E':\n        this._x += 1;\n        break;\n      case 'W':\n        this._x -= 1;\n        break;\n      default:\n        // do nothing\n    }\n  }\n\n  get type() {\n    return 'Martian';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/martian.js","/** @module Store */\n\nexport const lostList = []; // manages grid points of lost robots\n\nconst _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\nexport default class Store {\n  constructor() {\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n  add(...martian) {\n    const mars = _mars.get(this);\n\n    martian.forEach((m) => {\n      try {\n        if (['Martian', 'Robot'].includes(m.type)) {\n          mars.set(m.name, m);\n        }\n      }\n      catch (e) {\n        throw new Error('Can only store Martians and Robots.');\n      }\n    });\n\n    return mars.size;\n  }\n\n  /**\n   *\n   * @param   {object}   martian to act on\n   * @returns {boolean} reflect if boolean was successful\n   */\n  update(martian) {\n    const mars = _mars.get(this);\n\n    if (mars.has(martian.name)) {\n      mars.set(martian.name, martian);\n    }\n\n    return mars.has(martian.name);\n  }\n\n  /**\n   *\n   * @param   {string} martianName: use as key to delete from mars\n   * @returns {boolean} confirm deletion\n   */\n  remove(martianName) {\n    const mars = _mars.get(this);\n    return mars.delete(martianName);\n  }\n\n  /**\n   *\n   * @param   {string} martianName: key to retrieve\n   * @returns {object} martian/robot or undefined\n   */\n  get(martianName) {\n    const mars = _mars.get(this);\n    return mars.get(martianName);\n  }\n\n  /**\n   *\n   * @returns {Map} return all mars contents\n   */\n  getAll() {\n    const mars = _mars.get(this);\n    return mars;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/store.js","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/config.js\n// module id = 56\n// module chunks = 1","/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nconst _points = new WeakMap();\n\nexport default class CardinalPoints {\n  constructor() {\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n  getDegree(point) {\n    const points = _points.get(this);\n    return points.get(point.toString().toUpperCase());\n  }\n\n  /**\n   *\n   * @param   {number} degree\n   * @returns {string} Corresponding cardinal point for degree\n   */\n  getPointName(degree) {\n    const points = _points.get(this);\n    for (const [key, value] of points) {\n      if (value === Number.parseInt(degree, 10)) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal point\n   * @returns {boolean} True if point exists in Cardinal Points map\n   */\n  isValidPoint(point) {\n    const points = _points.get(this);\n    return points.has(point.toString().toUpperCase());\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/cardinalPoints.js","/** @module Controller */\n\nimport { MAX_INSTRUCTION } from './config';\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log(`Invalid command received while processing '${being.name}', moving to next character.`);\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nexport function instruct(being, instructionsStr) {\n  const str = instructionsStr.trim().substring(0, MAX_INSTRUCTION);\n\n  for (let i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/controller.js","/** @module Martian Robot **/\n\nimport Martian from './martian';\nimport { isPosSafe } from './helpers';\nimport { bounds } from './config';\nimport { lostList } from './store';\n\nconst _processMotion = new WeakMap();\nconst _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\nexport default class MartianRobot extends Martian {\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  constructor(name, x, y, orientation) {\n    super(name, x, y, orientation);\n    this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(this, (tempPos, axis) => {\n      const hs = _hasScent.get(this);\n\n      switch (hs(this.point, tempPos, bounds.point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          this._isAlive = false;\n          lostList.push(this.point);\n          break;\n        case 2:\n          this[axis] = tempPos;\n          break;\n        default:\n          // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(this, (pointStr, tempPos, axisBounds) => {\n      if (lostList.find((point => point === pointStr)) &&\n        !isPosSafe(tempPos, axisBounds)) {\n        return 0;\n      }\n      else if (!isPosSafe(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n  }\n\n  set isAlive(value) {\n    if (typeof value === 'boolean') {\n      this._isAlive = value;\n    }\n    else {\n//          this._isAlive = true;\n      throw new Error('A robot can only be alive (true) or lost (false).');\n    }\n  }\n\n  get isAlive() {\n    return this._isAlive;\n  }\n\n  get type() {\n    return 'Robot';\n  }\n\n  /**\n   * orientation determines which axis to increment/decrement along\n   */\n  move() {\n    const pm = _processMotion.get(this);\n\n    switch (this._orientation) {\n      case 'N':\n        pm((this._y + 1), 'y');\n        break;\n      case 'S':\n        pm((this._y - 1), 'y');\n        break;\n      case 'E':\n        pm((this._x + 1), 'x');\n        break;\n      case 'W':\n        pm((this._x - 1), 'x');\n        break;\n      default:\n        // do nothing\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/martianRobot.js"],"sourceRoot":""}